# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.


PROJECT = vapor

###########################
# LEAVE THESE THINGS ALONE!
###########################

ifndef	ARCH
include $(TOP)/make/config/arch.mk
endif

include $(TOP)/make/config/$(ARCH).mk


ifdef PROGRAM
BUILDDIR := $(TOP)/targets/$(ARCH)/built/$(PROGRAM)
else
ifdef LIBRARY
BUILDDIR := $(TOP)/targets/$(ARCH)/built/$(LIBRARY)
else
BUILDDIR := dummy_builddir
endif
endif


CR_CC = $(CC)
CR_CXX = $(CXX)

ifdef MATH
ifndef WINDOWS
LDFLAGS += -lm
endif
endif

ifdef QT
# Whenever QT is used in a directory, the Makefile must
# define MOC_DIR and UI_DIR.  MOC_DIR specifies the directory
# where the MOC intermediate files will go and UI_DIR contains *.ui files 
# as well as the resulting .cpp, .h files.
# in the UI_DIR
# All the names of .ui files must be specified in $(UI_FILES),
# and the names of .h files containing the Q_OBJECT macro must
# be specified in $(QT_HEADERS)
MOC = $(QTDIR)/bin/moc
UIC = $(QTDIR)/bin/uic


#Specify that the .ui files will result in objects
FILES += $(UI_FILES)
QTTEMPS += $(UI_FILES:%=$(UI_DIR)/%.cpp)
QTTEMPS += $(UI_FILES:%=$(UI_DIR)/%.h)
QTTEMPS += $(UI_FILES:%=$(MOC_DIR)/moc_%.cpp)
#rules to generate .cpp from UI_FILES, using UIC:
 
%.h: %.ui
	@$(UIC) $< -o $@
%.cpp: %.h %.ui
	@$(UIC) $*.ui  -i $< -o $@

#specify that QT_HEADERS result in compiled moc_* files 
MOCS := $(QT_HEADERS:%=moc_%)
FILES += $(MOCS)

#rule to generate moc*.cpp from QT_HEADERS,
#placing intermediate result in MOC_DIR
QTTEMPS += $(MOCS:%=$(MOC_DIR)/%.cpp)

.SECONDARY: $(QTTEMPS) 

$(MOC_DIR)/moc_%.cpp : %.h
	@$(MAKE_MOCDIR)
	@$(MOC) $< -o $@ 

#specify that the UI_FILES also result in MOC intermediates: 
MOC_UIS := $(UI_FILES:%=moc_%)
FILES += $(MOC_UIS)

#Provide rules to do the MOCing of the files generated by UIC:

$(MOC_DIR)/moc_%.cpp : $(UI_DIR)/%.h
	@$(MAKE_MOCDIR)
	@$(MOC) $< -o $@ 

INCLUDE_DIRS += -I"$(QTDIR)/include" -I$(UI_DIR)
#END OF ifdef QT
endif

OBJDIR := $(BUILDDIR)
DEPDIR := $(BUILDDIR)/dependencies
BINDIR := $(TOP)/targets/$(ARCH)/bin
INCDIR := $(TOP)/include
DSO_DIR := $(BINDIR)
#DSO_DIR := $(TOP)/targets/$(ARCH)/lib/
DOCDIR := $(TOP)/targets/common/doc

define MAKE_MOCDIR
	if test ! -d $(MOC_DIR); then $(MKDIR) $(MOC_DIR); fi
endef

define MAKE_OBJDIR
	if test ! -d $(OBJDIR); then $(MKDIR) $(OBJDIR); fi
endef

define MAKE_BINDIR
	if test ! -d $(BINDIR); then $(MKDIR) $(BINDIR); fi
endef

define MAKE_DEPDIR
	if test ! -d $(DEPDIR); then $(MKDIR) $(DEPDIR); fi
endef

define MAKE_DSODIR
	if test ! -d $(DSO_DIR); then $(MKDIR) $(DSO_DIR); fi
endef

define MAKE_INCDIR
	if test ! -d $(INCDIR)/$(PROJECT); then $(MKDIR) $(INCDIR)/$(PROJECT); fi
endef

define MAKE_DOCDIR
	if test ! -d $(DOCDIR); then $(MKDIR) $(DOCDIR); fi
endef

ifdef TEST
FILES := $(TEST)
endif

DEPS    := $(addprefix $(DEPDIR)/, $(FILES))
DEPS    := $(addsuffix .depend, $(DEPS))
OBJS    := $(addprefix $(OBJDIR)/, $(FILES))
OBJS    := $(addsuffix $(OBJSUFFIX), $(OBJS))
INCS    := $(addprefix $(INCDIR)/$(PROJECT)/, $(HEADER_FILES))
INCS    := $(addsuffix .h, $(INCS))
ifdef LIBRARY
ifdef SHARED
	LIBNAME := $(addprefix $(DSO_DIR)/, $(LIBPREFIX)$(LIBRARY)$(DLLSUFFIX))
	AIXDLIBNAME := $(addprefix $(OBJDIR)/, $(LIBPREFIX)$(LIBRARY)$(OBJSUFFIX))
else
	LIBNAME := $(addprefix $(DSO_DIR)/, $(LIBPREFIX)$(LIBRARY)$(LIBSUFFIX))
endif
else
	LIBNAME := dummy_libname
endif

TEMPFILES := *~ \\\#*\\\# so_locations *.pyc tmpAnyDX.a tmpAnyDX.exp load.map shr.o *.pdb *.idb

ifdef PROGRAM
PROG_TARGET := $(BINDIR)/$(PROGRAM)
TARGET := $(PROGRAM)
SHORT_TARGET_NAME = $(PROGRAM)
else
PROG_TARGET := dummy_prog_target
endif

ifdef COMPILE_ONLY
TARGET := $(OBJS)
endif

ifdef LIBRARY
SHORT_TARGET_NAME = $(LIBRARY)
ifdef SHARED
TARGET := $(LIBPREFIX)$(LIBRARY)$(DLLSUFFIX)
else
TARGET := $(LIBPREFIX)$(LIBRARY)$(LIBSUFFIX)
endif
endif

ifndef TARGET
TARGET := NOTHING
endif

ifeq ($(INCLUDEDEPS), 1)
ifneq ($(DEPS)HACK, HACK)
include $(DEPS)
endif
endif

INCLUDE_DIRS += -I$(INCDIR) -I.

PRINT_COMMAND := lpr

CFLAGS += -D$(ARCH) $(INCLUDE_DIRS)
CXXFLAGS += -D$(ARCH) $(INCLUDE_DIRS)

ifdef LESSWARN
WARN_STRING = (NOWARN)
else
CFLAGS += $(FULLWARN)
endif

ifeq ($(RELEASE), 1)
CFLAGS += $(C_RELEASE_FLAGS)
CXXFLAGS += $(CXX_RELEASE_FLAGS)
LDFLAGS += $(LD_RELEASE_FLAGS)
RELEASE_STRING = (RELEASE)
RELEASE_FLAGS = "RELEASE=1"
else
ifdef PROFILE
CFLAGS += $(C_DEBUG_FLAGS) $(PROFILE_FLAGS)
CXXFLAGS += $(CXX_DEBUG_FLAGS) $(PROFILE_FLAGS)
LDFLAGS += $(LD_DEBUG_FLAGS) $(PROFILE_LAGS)
RELEASE_STRING = (PROFILE)
else
CFLAGS += $(C_DEBUG_FLAGS)
CXXFLAGS += $(CXX_DEBUG_FLAGS)
LDFLAGS += $(LD_DEBUG_FLAGS)
RELEASE_STRING = (DEBUG)
endif
endif

ifeq ($(THREADSAFE), 1)
CFLAGS += -DCHROMIUM_THREADSAFE=1
CXXFLAGS += -DCHROMIUM_THREADSAFE=1
RELEASE_STRING += (THREADSAFE)
endif

ifdef WINDOWS
LDFLAGS += /incremental:no 
#LDFLAGS += /pdb:none
ifeq ($(RELEASE), 0)
LDFLAGS += /debug
endif
LDFLAGS := /link $(LDFLAGS)
endif

ifdef TRACKS_STATE
# May God forgive me for this hack
STATE_STRING += (STATE)
PERSONAL_LIBRARIES += crstate
endif

ifdef PACKS
# May God forgive me for this hack
PACK_STRING += (PACK)
PERSONAL_LIBRARIES += crpacker
endif

ifdef UNPACKS
# May God forgive me for this hack
UNPACK_STRING += (UNPACK)
PERSONAL_LIBRARIES += crunpacker
endif

ifndef SUBDIRS
all: arch $(PRECOMP) headers dep
recurse: $(PROG_TARGET) $(LIBNAME) copies done
else
SUBDIRS_ALL = $(foreach dir, $(SUBDIRS), $(dir).subdir)

subdirs: $(SUBDIRS_ALL)

$(SUBDIRS_ALL):
	@$(MAKE) -C $(basename $@) $(RELEASE_FLAGS)
endif

release:
	@$(MAKE) RELEASE=1

profile:
	@$(MAKE) PROFILE=1

done:
	@$(ECHO) "  Done!"
	@$(ECHO) ""

arch: 
	@$(ECHO) "-------------------------------------------------------------------------------"
ifdef BANNER
	@$(ECHO) "              $(BANNER)"
else
ifdef PROGRAM
	@$(ECHO) "              Building $(TARGET) for $(ARCH) $(RELEASE_STRING) $(STATE_STRING) $(PACK_STRING) $(UNPACK_STRING) $(VTK_STRING) $(WARN_STRING)"
endif
ifdef LIBRARY
	@$(ECHO) "              Building $(TARGET) for $(ARCH) $(RELEASE_STRING) $(STATE_STRING) $(PACK_STRING) $(UNPACK_STRING) $(VTK_STRING) $(WARN_STRING)"
endif
endif
	@$(ECHO) "-------------------------------------------------------------------------------"
ifneq ($(BUILDDIR), dummy_builddir)
	@$(MAKE_BINDIR)
	@$(MAKE_OBJDIR)
	@$(MAKE_DEPDIR)
	@$(MAKE_DSODIR)
	@$(MAKE_INCDIR)
	@$(MAKE_DOCDIR)
endif

ifdef WINDOWS
LIBRARIES := $(foreach lib,$(LIBRARIES),$(TOP)/targets/$(ARCH)/bin/$(LIBPREFIX)$(lib)$(LIBSUFFIX))
LIBRARIES += $(foreach lib,$(PERSONAL_LIBRARIES),$(TOP)/targets/$(ARCH)/lib/$(LIBPREFIX)$(SHORT_TARGET_NAME)_$(lib)_copy$(LIBSUFFIX))
#LIBRARIES := $(LIBRARIES:$(DLLSUFFIX)=$(LIBSUFFIX))
STATICLIBRARIES :=

else

ifeq ($(ARCH), IRIX64)
LDFLAGS += -L$(DSO_DIR) -rpath $(DSO_DIR)
else
LDFLAGS += -L$(DSO_DIR) -Xlinker -rpath -Xlinker $(DSO_DIR)
endif

STATICLIBRARIES := $(foreach lib,$(LIBRARIES),$(wildcard $(TOP)/lib/$(ARCH)/lib$(lib)$(LIBSUFFIX)))
LIBRARIES := $(foreach lib,$(LIBRARIES),-l$(lib))
LIBRARIES += $(foreach lib,$(PERSONAL_LIBRARIES),-l$(SHORT_TARGET_NAME)_$(lib)_copy)
P_LIB_FILES := $(foreach lib,$(PERSONAL_LIBRARIES),$(TOP)/lib/$(ARCH)/$(LIBPREFIX)$(SHORT_TARGET_NAME)_$(lib)_copy$(DLLSUFFIX) )
endif


dep: $(DEPS)
	$(MAKE) $(PARALLELMAKEFLAGS) recurse INCLUDEDEPS=1

headers: $(INCS)
ifdef SUBDIRS
	for i in $(SUBDIRS); do $(MAKE) -C $$i headers; done
endif

# XXX this target should also have a dependency on all static Cr libraries.
# For example: crserver depends on libcrstate.a and libcrserverlib.a
$(PROG_TARGET): $(OBJS) $(STATICLIBRARIES)
ifdef PROGRAM
	@$(ECHO) "Linking $(PROGRAM) for $(ARCH)"
ifdef WINDOWS
	@$(CR_CXX) $(OBJS) /Fe$(PROG_TARGET)$(EXESUFFIX) $(LIBRARIES) $(LDFLAGS)
else
ifdef BINUTIL_LINK_HACK
ifdef PERSONAL_LIBRARIES
	@$(PERL) $(TOP)/buildutils/trans_undef_symbols.pl $(PROGRAM) $(TOP)/built/$(PROGRAM)/$(ARCH) $(P_LIB_FILES)
endif
endif
	$(CR_CXX) $(OBJS) -o $(PROG_TARGET)$(EXESUFFIX) $(LDFLAGS) $(LIBRARIES)
endif

endif

$(LIBNAME): $(OBJS) $(LIB_DEFS) $(STATICLIBRARIES)
ifdef LIBRARY
	@$(ECHO) "Linking $@"
ifdef WINDOWS
ifdef SHARED
	@$(LD) $(SHARED_LDFLAGS) /Fe$(LIBNAME) $(OBJS) $(LIBRARIES) $(LIB_DEFS) $(LDFLAGS)
else
	@LIB.EXE /nologo $(OBJS) $(LIBRARIES) /OUT:$(LIBNAME)
endif #shared
else #windows
ifdef SHARED
ifdef AIXSHAREDLIB
	@$(ECHO) "AIX shared obj link"
	@$(ECHO) "Not using LDFLAGS $(LDFLAGS)"
	rm -f tmpAnyDX.a shr.o
	rm -f $(AIXDLIBNAME)
	rm -f $(LIBNAME)
	ar -ruv tmpAnyDX.a $(OBJS)
	nm -epC tmpAnyDX.a | awk -f $(TOP)/buildutils/exports.awk > tmpAnyDX.exp
	pwd
	@$(ECHO) ld -bnoentry -bloadmap:load.map -bM:SRE -o shr.o -bE:tmpAnyDX.exp tmpAnyDX.a -L$(TOP)/lib/AIX $(SHARED_LDFLAGS) $(LIBRARIES) $(XSLIBS) -ldl -lm -lc
	ld -bnoentry -bloadmap:load.map -bM:SRE -o shr.o -bE:tmpAnyDX.exp tmpAnyDX.a -L$(TOP)/lib/AIX $(SHARED_LDFLAGS) $(LIBRARIES) $(XSLIBS) -ldl -lm -lc
	ar $(ARCREATEFLAGS) $(LIBNAME) shr.o
	cp shr.o $(AIXDLIBNAME)
	@$(CP) $(AIXDLIBNAME) $(DSO_DIR)
	rm -f tmpAnyDX.* shr.o load.map
	rm -f $(DSO_DIR)/$(LIBPREFIX)$(SHORT_TARGET_NAME)$(DLLSUFFIX)
else #aixsharedlib
ifdef BINUTIL_LINK_HACK
ifdef PERSONAL_LIBRARIES
	@$(PERL) $(TOP)/buildutils/trans_undef_symbols.pl $(SHORT_TARGET_NAME) $(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH) $(P_LIB_FILES)
endif
endif
	$(LD) $(SHARED_LDFLAGS) -o $(LIBNAME) $(OBJS) $(LDFLAGS) $(LIBRARIES)
endif #aixsharedlib
else #shared
	@$(AR) $(ARCREATEFLAGS) $@ $(OBJS)
	@$(RANLIB) $@
endif #shared
endif #windows

#	@$(CP) $(LIBNAME) $(DSO_DIR)
endif #library

ifdef LIB_COPIES
COPY_TARGETS := $(foreach copy, $(LIB_COPIES), $(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH)/$(LIBPREFIX)$(copy)_$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX) )

copies: 
	@$(MAKE) relink
else 
ifdef SPU_COPIES
COPY_TARGETS := $(foreach copy, $(SPU_COPIES), $(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH)/$(LIBPREFIX)$(copy)$(DLLSUFFIX) )

copies: 
	@$(MAKE) relink
else
copies:
endif
endif

relink: $(COPY_TARGETS)

$(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH)/$(LIBPREFIX)%_$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX): $(OBJS) $(STATICLIBRARIES)
	@$(ECHO) "Linking $(LIBPREFIX)$*_$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX)"
	$(MKDIR) $(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH)
ifdef WINDOWS
	@$(LD) $(SHARED_LDFLAGS) /Fe$@ $(OBJS) $(LIBRARIES) $(LIB_DEFS) $(LDFLAGS)
else
ifdef AIXSHAREDLIB
	@$(ECHO) "AIX shared obj link"
	@$(ECHO) "Not using LDFLAGS $(LDFLAGS)"
	ar -ruv tmpAnyDX.a $(OBJS)
	nm -epC tmpAnyDX.a | awk -f $(TOP)/buildutils/exports.awk > tmpAnyDX.exp
	pwd
	@$(ECHO) ld -bnoentry -bloadmap:load.map -bM:SRE -o shr.o -bE:tmpAnyDX.exp tmpAnyDX.a -L$(TOP)/lib/AIX $(SHARED_LDFLAGS) $(LIBRARIES) $(XSLIBS) -ldl -lm -lc
	ld -bnoentry -bloadmap:load.map -bM:SRE -o shr.o -bE:tmpAnyDX.exp tmpAnyDX.a -L$(TOP)/lib/AIX $(SHARED_LDFLAGS) $(LIBRARIES) $(XSLIBS) -ldl -lm -lc
	ar $(ARCREATEFLAGS)  $@ shr.o
	cp shr.o $(AIXDLIBNAME)
	@$(CP) $(AIXDLIBNAME) $(DSO_DIR)
	rm -f $(DSO_DIR)/$(LIBPREFIX)$@_$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX)
	rm -f tmpAnyDX.* shr.o load.map

else
ifdef BINUTIL_LINK_HACK
	@$(MKDIR) $(TOP)/built/$(LIBPREFIX)$*$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX)/$(ARCH)
	@$(PERL) $(TOP)/buildutils/trans_def_symbols.pl $* $(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH)/$(LIBPREFIX)$(SHORT_TARGET_NAME)$(DLLSUFFIX) $(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH) $(TOP)/built/$(LIBPREFIX)$*$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX)/$(ARCH)
	@$(LD) $(SHARED_LDFLAGS) -o $@ $(TOP)/built/$(LIBPREFIX)$*$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX)/$(ARCH)/*.o $(LDFLAGS) $(LIBRARIES)
else
	@$(LD) $(SHARED_LDFLAGS) -o $@ $(OBJS) $(LDFLAGS) $(LIBRARIES)
endif
endif
endif
	@$(CP) $@ $(DSO_DIR)

$(TOP)/built/$(SHORT_TARGET_NAME)/$(ARCH)/$(LIBPREFIX)%$(DLLSUFFIX): $(OBJS) $(STATICLIBRARIES)
	@$(ECHO) "Linking $(LIBPREFIX)$*$(DLLSUFFIX)"
	$(MKDIR) $(TOP)/built/$*/$(ARCH)
ifdef WINDOWS
	@$(LD) $(SHARED_LDFLAGS) /Fe$@ $(OBJS) $(LIBRARIES) $(LIB_DEFS) $(LDFLAGS)
else
ifdef AIXSHAREDLIB
	@$(ECHO) "AIX shared obj link"
	@$(ECHO) "Not using LDFLAGS $(LDFLAGS)"
	ar -ruv tmpAnyDX.a $(OBJS)
	nm -epC tmpAnyDX.a | awk -f $(TOP)/buildutils/exports.awk > tmpAnyDX.exp
	pwd
	@$(ECHO) ld -bnoentry -bloadmap:load.map -bM:SRE -o shr.o -bE:tmpAnyDX.exp tmpAnyDX.a -L$(TOP)/lib/AIX $(SHARED_LDFLAGS) $(LIBRARIES) $(XSLIBS) -ldl -lm -lc
	ld -bnoentry -bloadmap:load.map -bM:SRE -o shr.o -bE:tmpAnyDX.exp tmpAnyDX.a -L$(TOP)/lib/AIX $(SHARED_LDFLAGS) $(LIBRARIES) $(XSLIBS) -ldl -lm -lc
	#ar $(ARCREATEFLAGS)  $(TOP)/built/$@/$(ARCH)/$(LIBPREFIX)$@$(DLLSUFFIX) shr.o
	ar $(ARCREATEFLAGS)  $@ shr.o
	cp shr.o $(AIXDLIBNAME)
	@$(CP) $(AIXDLIBNAME) $(DSO_DIR)
	echo still have not done cleanup
	#rm -f $(DSO_DIR)/$(LIBPREFIX)$@_$(SHORT_TARGET_NAME)_copy$(DLLSUFFIX)
	rm -f tmpAnyDX.* shr.o load.map

else
	@$(LD) $(SHARED_LDFLAGS) -o $@ $(OBJS) $(LDFLAGS) $(LIBRARIES)
endif
endif
	@$(CP) $@ $(DSO_DIR)



.SUFFIXES: .cpp .c .cxx .cc .C .s .l .h

#$(INCDIR)/$(PROJECT)/%.h: %.h
#	@$(MAKE_INCDIR)
#	@$(CP) $< $@

%.cpp: %.l
	@$(ECHO) "Creating $@"
	@$(LEX) $< > $@

%.cpp: %.y
	@$(ECHO) "Creating $@"
	@$(YACC) $<
	@$(MV) y.tab.c $@

$(DEPDIR)/%.depend: %.cpp
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(DEPDIR)/%.depend: $(UI_DIR)/%.cpp
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding UI dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(DEPDIR)/%.depend: $(MOC_DIR)/%.cpp
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding UI dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(DEPDIR)/%.depend: %.cxx
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(DEPDIR)/%.depend: %.cc
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(DEPDIR)/%.depend: %.C
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(DEPDIR)/%.depend: %.c
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(DEPDIR)/%.depend: %.s
	@$(MAKE_DEPDIR)
	@$(ECHO) "Rebuilding dependencies for $<"
	@$(PERL) $(TOP)/buildutils/fastdep.pl $(INCLUDE_DIRS) --obj-prefix='$(OBJDIR)/' --extra-target=$@ $< > $@

$(OBJDIR)/%.obj: %.cpp Makefile
	@$(ECHO) -n "Compiling "
	$(CR_CXX) /Fo$@ /c $(CXXFLAGS) $<

$(OBJDIR)/%.obj: %.c Makefile
	@$(ECHO) -n "Compiling "
	$(CR_CC) /Fo$@ /c $(CFLAGS) $<

$(OBJDIR)/%.o: %.cpp Makefile
	@$(ECHO) "Compiling $<"
	$(CR_CXX) -o $@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.o: $(UI_DIR)/%.cpp Makefile
	@$(ECHO) "UIC and Compiling $<"
	$(CR_CXX) -o $@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.obj: $(UI_DIR)/%.cpp Makefile
	@$(ECHO) "UIC and Compiling $<"
	$(CR_CXX) /Fo$@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.o: $(MOC_DIR)/%.cpp Makefile
	@$(ECHO) "MOCing and Compiling $<"
	$(CR_CXX) -o $@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.obj: $(MOC_DIR)/%.cpp Makefile
	@$(ECHO) "MOCing and Compiling $<"
	$(CR_CXX) /Fo$@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.o: %.cxx Makefile
	@$(ECHO) "Compiling $<"
	$(CR_CXX) -o $@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.o: %.cc Makefile
	@$(ECHO) "Compiling $<"
	$(CR_CXX) -o $@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.o: %.C Makefile
	@$(ECHO) "Compiling $<"
	$(CR_CXX) -o $@ -c $(CXXFLAGS) $<

$(OBJDIR)/%.o: %.c Makefile
	@$(ECHO) "Compiling $<"
	$(CR_CC) -o $@ -c $(CFLAGS) $<

$(OBJDIR)/%.o: %.s Makefile
	@$(ECHO) "Assembling $<"
	$(AS) -o $@ $<

###############
# Other targets
###############

clean::
ifdef SUBDIRS
	@for i in $(SUBDIRS); do $(MAKE) -C $$i clean; done
else
ifdef LIBRARY
	@$(ECHO) "Removing all $(ARCH) object files for $(TARGET)."
else
ifdef PROGRAM
	@$(ECHO) "Removing all $(ARCH) object files for $(PROGRAM)."
endif
endif
endif
	@$(RM) $(OBJS) $(TEMPFILES) $(QTTEMPS)
#	@$(RM) $(INCS)
ifneq ($(SLOP)HACK, HACK)
	@$(ECHO) "Also blowing away:    $(SLOP)"
	@$(RM) $(SLOP)
endif


ifdef SUBDIRS
clobber::
	@for i in $(SUBDIRS); do $(MAKE) -C $$i clobber; done
else
clobber:: clean
ifdef LIBRARY
	@$(ECHO) "Removing $(LIBNAME) for $(ARCH)."
	@$(RM) $(LIBNAME)
else
ifdef PROGRAM
	@$(ECHO) "Removing $(PROGRAM) for $(ARCH)."
	@$(RM) $(PROGRAM)
	@$(RM) $(BINDIR)/$(PROGRAM)
endif
endif
	@$(ECHO) "Removing dependency files (if any)"
	@$(RM) $(DEPDIR)/*.depend
endif

doc: FRC
ifdef SUBDIRS
	@for i in $(SUBDIRS); do $(MAKE) -C $$i doc; done

endif

FRC:


# Make CRNAME.tar.gz and CRNAME.zip files
CRNAME = cr-1.1
tarball: clean
#	remove old files
	-rm -rf ../$(CRNAME)
	-rm -f ../$(CRNAME).tar.gz
	-rm -f ../$(CRNAME).zip
#	make copy of cr directory
	cp -r ../cr ../$(CRNAME)
#	remove CVS files and other unneeded files
	-find ../$(CRNAME) -name CVS -exec rm -rf '{}' \;
	rm -f ../$(CRNAME)/mothership/server/crconfig.py
	rm -rf ../$(CRNAME)/built
	rm -rf ../$(CRNAME)/bin
	rm -rf ../$(CRNAME)/lib
#	make tarball and zip file
	cd .. ; tar cvf $(CRNAME).tar $(CRNAME) ; gzip $(CRNAME).tar
	cd .. ; zip -r $(CRNAME).zip $(CRNAME)
