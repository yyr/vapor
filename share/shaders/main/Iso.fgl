#include gradient2.hgl
#include tex2lay.hgl
vec3 tex2lay(vec3 texCoord, int comp);

#ifdef	MAPPED
uniform sampler1D colormap;
#endif

uniform sampler1D coordmap;

uniform sampler2D texcrd_buffer;	// tex coords for back facing quads
uniform sampler2D depth_buffer;	// depth back facing quads
uniform sampler3D volumeTexture;	// sampled data to ray cast
uniform float isovalue;
uniform int zidx;	// texel component containing user Z coordinate
uniform int midx;	// texel component containing missing data indicator
uniform bool fast;	// render fast
uniform bool stretched;  // stretched coordinates (rectilinear grid)




#ifdef	MAPPED
uniform int vidx;	// texel component containing mapped variable
#else
uniform vec4 isocolor;	// base color for isosurface
#endif
  
uniform int nsamples;	// sampling distance along ray (eye coordinates)
uniform vec3 dimensions;	// ijk dimensions of 3D texture

varying vec4 position;	// interpolated gl_Position

#ifdef	LIGHTING
uniform vec2 winsize;	// Window width and height 
  
// Lighting parameters
  
uniform vec3 lightDirection;
uniform float kd;
uniform float ka;
uniform float ks;
uniform float expS;
  
  
varying vec3 view;	// normalized, negative position (view vector)
#endif
  
vec3 Gradient(in vec3, in vec3);
//------------------------------------------------------------------
// Fragment shader main
//------------------------------------------------------------------
void main(void)
{
		
	// Normalized window coordinates of this frament
	vec2 texCoord2D = ((position.xy / position.w) + 1.0) / 2.0;

	// Starting and finishing texture coordinate of ray
	vec3 texStop = texture2D(texcrd_buffer, texCoord2D).xyz;
	vec3 texStart = gl_TexCoord[0].xyz;

	// Ray direction, texture coordinates
	vec3 texDir = texStop - texStart;
	vec3 texDirUnit = normalize(texDir);
	//float len = length(texDir);

	float n = gl_DepthRange.near;
	float f = gl_DepthRange.far;

	// Starting and stopping Z (window, NDC and eye coordinates)
	// We need eye coordinates to interpolate depth (Z) because
	// NDC and Window space is non-linear
	// N.B. Inverse transform of window coords only works for perspective

	float zStopWin = texture2D(depth_buffer, texCoord2D).x;
	float zStopNDC = (2*zStopWin)/(f-n) - (n+f)/(f-n);
	float zStopEye = -gl_ProjectionMatrix[3].z / (zStopNDC + gl_ProjectionMatrix[2].z);
	float zStartWin = gl_FragCoord.z;
	float zStartNDC = (2*zStartWin)/(f-n) - (n+f)/(f-n);
	float zStartEye = -gl_ProjectionMatrix[3].z / (zStartNDC + gl_ProjectionMatrix[2].z);

#ifdef	LIGHTING
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	vec2 posNDC = gl_FragCoord.xy * 2.0 / winsize.xy - 1.0;
#endif

	// Compute number of samples based on samplin distance, delta 
	//
	int nsegs = int(min(float(nsamples), 256.0));
	if (fast) nsegs = 16;

	vec3 deltaVec = texDirUnit * (length(texDir) / float(nsegs));
	float deltaZ = (zStopEye-zStartEye) / float(nsegs);

	// texCoord{0,1} are the end points of a ray segment in texture coords
	// s{0,1} are the sampled values of the texture at ray segment endpoints
	vec3 texCoord0 = texStart;
	vec3 texCoord1 = texCoord0+deltaVec;

	float s0, s1;
	bool missing = false;
	vec3 t0 = texCoord0;
	vec3 t1 = texCoord1;
	if (zidx>0 && ! fast) {
		//
		// With layered data the starting point of the ray may not reside
		// inside of the data volume. Keep stepping along ray until
		// we're inside.
		//
		bool outside = true;
		while (outside && (nsegs > 0)) {
			t0 = tex2lay(texCoord0, zidx);
			t1 = tex2lay(texCoord1, zidx);
			if (t0.x < 0.0 || t0.y < 0.0 || t0.z < 0.0 ||
				t0.x > 1.0 || t0.y > 1.0 || t0.z > 1.0 || 
				t1.x < 0.0 || t1.y < 0.0 || t1.z < 0.0 || 
				t1.x > 1.0 || t1.y > 1.0 || t1.z > 1.0) {
				// ray starting point is outside the volume
				//
				texCoord0 = texCoord1;
				texCoord1 = texCoord1+deltaVec;
				nsegs--;
			}
			else {
				outside = false;
			}
		}
	}
	else if (stretched) {
			t0.x = texture1D(coordmap, t0.x).x;
			t0.y = texture1D(coordmap, t0.y).y;
			t0.z = texture1D(coordmap, t0.z).z;
			t1.x = texture1D(coordmap, t1.x).x;
			t1.y = texture1D(coordmap, t1.y).y;
			t1.z = texture1D(coordmap, t1.z).z;
	}

	s0 = texture3D(volumeTexture, t0).x;
	s1 = texture3D(volumeTexture, t1).x;
	if (midx > 0) {
		if ((texture3D(volumeTexture, t0)[midx] != 0.0) || 
			(texture3D(volumeTexture, t1)[midx] != 0.0)) {

			missing = true;
		}
	}

	// Current Z value along ray and current (accumulated) color 
	float fragDepth = zStartEye;
	vec4 fragColor =  vec4(0.0, 0.0, 0.0, 0.0);

	// Make sure gl_FragDepth is set for all execution paths
	gl_FragDepth = zStopWin;

	// Composite from front to back

	// false after first isosurface interesected 
	bool first = true;

	for (int i = 0; i<nsegs; i++) {

		// If sign changes we have an isosurface

		if ((! missing) && (((isovalue-s1) * (isovalue-s0)) < 0.0)) {

			float weight = (isovalue-s0) / (s1-s0);

#if defined (MAPPED) || defined (LIGHTING)
			// find precise texture coord of isovalue with linear 
			// interpolation current segment end points 
			vec3 isoTexCoord = texCoord0 + (weight * deltaVec);
			if (zidx>0 && ! fast) {
				isoTexCoord = tex2lay(isoTexCoord, zidx);
			}
			else if (stretched) {
				isoTexCoord.x = texture1D(coordmap, isoTexCoord.x).x;
				isoTexCoord.y = texture1D(coordmap, isoTexCoord.y).y;
				isoTexCoord.z = texture1D(coordmap, isoTexCoord.z).z;
			}
#endif

#ifdef	MAPPED
			// pseudo color isosurface with 2nd variable
			//
			float var2 = texture3D(volumeTexture,isoTexCoord)[vidx];
			vec4 color = vec4(texture1D(colormap, var2));
#else
			vec4 color = isocolor;
#endif

#ifdef	LIGHTING

			// compute surface gradient at ray's intersection with isosurface
//			vec3 grad_dd = 0.5 / dimensions;
			vec3 gradient = gl_NormalMatrix * Gradient(dimensions, isoTexCoord);

			float diffuse = 0.0;
			float specular = 0.0;

			if (length(gradient) > 0.0) {

				gradient = normalize(gradient);
				// Ugh. Need to convert ray intersection point to eye coords 
				vec4 posClip = vec4( 
					posNDC, 
					-gl_ProjectionMatrix[3].z / fragDepth - gl_ProjectionMatrix[2].z,
				1.0);
				vec4 eyePos = gl_ProjectionMatrixInverse * posClip;
				eyePos /= eyePos.w;

				//use Phong illumination if non-zero gradient

				vec3 lightVec      = normalize(lightDirection);
				vec3 halfv      = reflect(-lightVec, gradient);
				vec3 viewVec      = normalize(-eyePos.xyz);

				diffuse  = abs(dot(lightVec, gradient));
				if (diffuse > 0.0) {
					specular = pow(abs(dot(halfv, normalize(viewVec))), expS);
				}

			}
			diffuse = kd * diffuse;
			specular = ks * specular;

			color.xyz = color.xyz * (ka+diffuse) + vec3(specular*lightColor);
#endif

			// blend fragment color with front to back compositing operator 
			fragColor = (vec4(1.0)- vec4(fragColor.a))*color + fragColor;

			// The depth buffer value will be the first ray-isosurface 
			// intersection. N.B. may not be best choice 

			if (first) {
				fragDepth = zStartEye + (float(i) * deltaZ) + (deltaZ*weight);
				first = false;
			}

			//
			// early ray termination
			//
			if (fragColor.a >= 0.95) break;
		}

		texCoord0 = texCoord1;
		texCoord1 = texCoord1+deltaVec;
		t1 = texCoord1;
		s0 = s1;
		if (zidx>0 && ! fast) {
			t1 = tex2lay(t1, zidx);
		} 
		else if (stretched) {
			t1.x = texture1D(coordmap, t1.x).x;
			t1.y = texture1D(coordmap, t1.y).y;
			t1.z = texture1D(coordmap, t1.z).z;
		}

		//
		// If outside of texture we're done
		//
		if (t1.x < 0.0 || t1.y < 0.0 || t1.z < 0.0 || 
			t1.x > 1.0 || t1.y > 1.0 || t1.z > 1.0) {
			
			break;
		}


		// if texCoord1 is inside the volume then lookup new 
		// value for s1. Otherwise s1 == s0 and there is no
		// ray-surface intersection
		//
		s1 = texture3D(volumeTexture, t1).x;
		if (midx > 0) {
			if (missing) s0 = s1;
			missing = (texture3D(volumeTexture, t1)[midx] != 0.0);
		}
	}

	if (fragColor.a == 0.0) discard;

	// Convert depth from eye coordinates back to window coords 

	fragDepth = (fragDepth * gl_ProjectionMatrix[2].z + gl_ProjectionMatrix[3].z) / -fragDepth; 
	//DepthPeel(fragDepth * ((f-n)/2) + (n+f)/2, fragColor);
	gl_FragDepth = fragDepth * ((f-n)/2) + (n+f)/2;
	gl_FragColor = fragColor;
}
