#include gradient2.hgl

uniform sampler2D colormap;
uniform sampler3D volumeTexture;
uniform vec3 dimensions;
uniform vec3 lightDirection;
uniform float kd;
uniform float ka;
uniform float ks;
uniform float expS;
varying vec3 ecPosition;
  
vec3 Gradient();
  
//-----------------------------------------------------------------------
// Fragment shader main
//-----------------------------------------------------------------------
void main(void)
{
  vec2 intensity;
  intensity.x = texture3D(volumeTexture, gl_TexCoord[0].xyz).x;
  intensity.y = texture3D(volumeTexture, gl_TexCoord[1].xyz).x;
  vec4 color = vec4 (texture2D(colormap, intensity));
  vec3 lightColor = vec3 (1.0, 1.0, 1.0);
    
  vec3 gradient = normalize(gl_NormalMatrix * Gradient());
    
  vec3 lightVec      = normalize(lightDirection);
  vec3 halfv      = reflect(-lightVec, gradient);
  vec3 viewVec      = normalize(-ecPosition);
    
  float diffuse  = abs(dot(lightVec, gradient));
   
  float specular = 0.0;
  if (diffuse > 0.0) {
      specular = pow(abs(dot(halfv, normalize(viewVec))), expS);
  }
    
  diffuse = kd * diffuse;
  specular = ks * specular;
    
  gl_FragColor.w = color.w;
  gl_FragColor.xyz = color.xyz * (ka + diffuse) + vec3(specular * lightColor);
}
   

